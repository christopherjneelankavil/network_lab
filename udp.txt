// serverUDP.c
#include<stdio.h>
#include<arpa/inet.h>
#include <unistd.h>
#define port 4000
void main()
{
struct sockaddr_in serveraddr,newaddr;
int sersocket,s,size;
char buffer[100];
sersocket=socket(AF_INET,SOCK_DGRAM,0);
if(sersocket>0)
printf("\nServer socket created");
serveraddr.sin_family=AF_INET;
serveraddr.sin_port=htons(port);
serveraddr.sin_addr.s_addr=htonl(INADDR_ANY);
s=bind(sersocket,(struct sockaddr*)&serveraddr,sizeof(serveraddr));
if(s==0)
printf("\nBind success");
size=sizeof(newaddr);
recvfrom(sersocket,buffer,1024,0,(struct sockaddr*)&newaddr,&size);
printf("\nString recieved:%s\n",buffer);
close(sersocket);
}
//Execution Steps:
//>> gcc serverChat_TCP.c -o ser
//>> ./ser
// clientUDP.c
#include<stdio.h>
#include<arpa/inet.h>
#include <unistd.h>
#define port 4000
void main()
{
struct sockaddr_in serveraddr;
int clisocket;
char buffer[100];
clisocket=socket(AF_INET,SOCK_DGRAM,0);
if(clisocket>0)
printf("\nClient socket created");
serveraddr.sin_family=AF_INET;
serveraddr.sin_port=htons(port);
serveraddr.sin_addr.s_addr=inet_addr("127.0.0.1");
printf("\nEnter string:");
scanf("%s",buffer);
sendto(clisocket,buffer,sizeof(buffer),0,(struct sockaddr*)&serveraddr,sizeof(serveraddr));

close(clisocket);
}